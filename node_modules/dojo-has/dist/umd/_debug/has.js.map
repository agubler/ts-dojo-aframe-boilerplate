{"version":3,"file":"has.js","sourceRoot":"","sources":["../../../src/has.ts"],"names":[],"mappings":"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","sourcesContent":["import { Require, Config } from './loader';\n\n/**\n * The valid return types from a feature test\n */\nexport type FeatureTestResult = boolean | string | number | undefined;\n\n/**\n * A function that tests for a feature and returns a result\n */\nexport type FeatureTest = () => FeatureTestResult;\n\n/**\n * A cache of results of feature tests\n */\nexport const testCache: { [feature: string]: FeatureTestResult } = {};\n\n/**\n * A cache of the un-resolved feature tests\n */\nexport const testFunctions: { [feature: string]: FeatureTest } = {};\n\n/**\n * AMD plugin function.\n *\n * Conditional loads modules based on a has feature test value.\n *\n * @param resourceId Gives the resolved module id to load.\n * @param require The loader require function with respect to the module that contained the plugin resource in its\n *                dependency list.\n * @param load Callback to loader that consumes result of plugin demand.\n */\nexport function load(resourceId: string, require: Require, load: (value?: any) => void, config?: Config): void {\n\tresourceId ? require([ resourceId ], load) : load();\n}\n\n/**\n * AMD plugin function.\n *\n * Resolves resourceId into a module id based on possibly-nested tenary expression that branches on has feature test\n * value(s).\n *\n * @param resourceId The id of the module\n * @param normalize Resolves a relative module id into an absolute module id\n */\nexport function normalize(resourceId: string, normalize: (moduleId: string) => string): string | null {\n\tconst tokens: RegExpMatchArray = resourceId.match(/[\\?:]|[^:\\?]*/g) || [];\n\tlet i = 0;\n\n\tfunction get(skip?: boolean): string | null {\n\t\tconst term = tokens[i++];\n\t\tif (term === ':') {\n\t\t\t// empty string module name, resolves to null\n\t\t\treturn null;\n\t\t}\n\t\telse {\n\t\t\t// postfixed with a ? means it is a feature to branch on, the term is the name of the feature\n\t\t\tif (tokens[i++] === '?') {\n\t\t\t\tif (!skip && has(term)) {\n\t\t\t\t\t// matched the feature, get the first value from the options\n\t\t\t\t\treturn get();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// did not match, get the second value, passing over the first\n\t\t\t\t\tget(true);\n\t\t\t\t\treturn get(skip);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// a module\n\t\t\treturn term;\n\t\t}\n\t}\n\n\tconst id = get();\n\n\treturn id && normalize(id);\n}\n\n/**\n * Check if a feature has already been registered\n *\n * @param feature the name of the feature\n */\nexport function exists(feature: string): boolean {\n\treturn Boolean(feature in testCache || testFunctions[feature]);\n}\n\n/**\n * Register a new test for a named feature.\n *\n * @example\n * has.add('dom-addeventlistener', !!document.addEventListener);\n *\n * @example\n * has.add('touch-events', function () {\n *    return 'ontouchstart' in document\n * });\n *\n * @param feature the name of the feature\n * @param value the value reported of the feature, or a function that will be executed once on first test\n * @param overwrite if an existing value should be overwritten. Defaults to false.\n */\nexport function add(feature: string, value: FeatureTest | FeatureTestResult, overwrite: boolean = false): void {\n\tif (exists(feature) && !overwrite) {\n\t\tthrow new TypeError(`Feature \"${feature}\" exists and overwrite not true.`);\n\t}\n\n\tif (typeof value === 'function') {\n\t\ttestFunctions[feature] = value;\n\t}\n\telse {\n\t\ttestCache[feature] = value;\n\t\tdelete testFunctions[feature];\n\t}\n}\n\n/**\n * Return the current value of a named feature.\n *\n * @param feature The name (if a string) or identifier (if an integer) of the feature to test.\n */\nexport default function has(feature: string): FeatureTestResult {\n\tlet result: FeatureTestResult;\n\n\tif (testFunctions[feature]) {\n\t\tresult = testCache[feature] = testFunctions[feature].call(null);\n\t\tdelete testFunctions[feature];\n\t}\n\telse if (feature in testCache) {\n\t\tresult = testCache[feature];\n\t}\n\telse {\n\t\tthrow new TypeError(`Attempt to detect unregistered has feature \"${feature}\"`);\n\t}\n\n\treturn result;\n}\n\n/*\n * Out of the box feature tests\n */\n\n/* Evironments */\nadd('host-browser', typeof document !== 'undefined' && typeof location !== 'undefined');\nadd('host-node', function () {\n\tif (typeof process === 'object' && process.versions && process.versions.node) {\n\t\treturn process.versions.node;\n\t}\n});\n"]}