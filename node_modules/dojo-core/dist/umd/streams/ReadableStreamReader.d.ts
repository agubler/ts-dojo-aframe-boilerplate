import Promise from 'dojo-shim/Promise';
import ReadableStream, { State } from './ReadableStream';
/**
 * Represents the objects returned by {@link ReadableStreamReader#read}. The data is accessible on the `value` property.
 * If the `done` property is true, the stream has no more data to provide.
 */
export interface ReadResult<T> {
    value: T | undefined;
    done: boolean;
}
/**
 * This class provides the interface for reading data from a stream. A reader can by acquired by calling
 * {@link ReadableStream#getReader}. A {@link ReadableStream} can only have a single reader at any time. A reader can
 * be released from the stream by calling {@link ReadableStreamReader.releaseLock}. If the stream still has data, a new
 * reader can be acquired to read from the stream.
 */
export default class ReadableStreamReader<T> {
    readonly closed: Promise<void>;
    private _closedPromise;
    private _storedError;
    private _readRequests;
    private _resolveClosedPromise;
    private _rejectClosedPromise;
    protected _ownerReadableStream: ReadableStream<T> | undefined;
    state: State;
    constructor(stream: ReadableStream<T>);
    /**
     * Cancel a stream. The reader is released and the stream is closed. {@link ReadableStream.Source#cancel} is
     * called with the provided `reason`.
     *
     * @param reason The reason for canceling the stream
     */
    cancel(reason: string): Promise<void>;
    /**
     * Read data from the stream.
     *
     * @returns A promise that resolves to a {@link ReadResult}.
     */
    read(): Promise<ReadResult<T>>;
    /**
     * Release a reader's lock on the corresponding stream. The reader will no longer be readable. Further reading on
     * the stream can be done by acquiring a new `ReadableStreamReader`.
     */
    releaseLock(): void;
    release(): void;
    /**
     * Resolves a pending read request, if any, with the provided chunk.
     * @param chunk
     * @return boolean True if a read request was resolved.
     */
    resolveReadRequest(chunk: T): boolean;
}
